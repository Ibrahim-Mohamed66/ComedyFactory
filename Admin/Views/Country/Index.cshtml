@using Admin.DataTable
@model CountryDataTable

@{

    ViewData["Main"] = _localizer["Countries"];
}

<div class="content-wrapper">
    @Html.AntiForgeryToken()
    <div class="page-title">
        <span class="title-data" data-main='@(ViewData["Main"])'>@ViewData["Title"]</span>
    </div>
    <div class="card main-card w-100">

        <div class="card-body">
            <a asp-action="Create" class="btn my_btn btn-clean btn-primary btn-sm "><i class="fa fa-plus"></i> @_localizer["CreateNew"]</a>
            <div class="table-fix scroll-x">
                @Html.AntiForgeryToken()

                <jquery-datatables id="countries"
                                   class=" table table-striped table-bordered"
                                   model="@Model"
                                   thead-class="text-center"
                                   enable-searching="true"
                                   search-row-th-class="p-0"
                                   search-input-class="form-control form-control-sm"
                                   search-input-style=""
                                   search-input-placeholder-prefix="Search">
                </jquery-datatables>
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <script>


        $(() => {

            function loadFinish(data) {
                $(".reload_table i").removeClass("fa-spin")
            }
            $.fn.dataTable.ext.buttons.reload = {
                text: 'Reload',
                action: function (e, dt, node, config) {
                    console.log(dt);
                    $(".reload_table i").addClass("fa-spin")
                    dt.ajax.reload(loadFinish);

                }
            };

            var template = "<'d-flex justify-content-between align-items-center my-dt-header 'Bf<'btn-clean'>>" +
                "<'overflow-x slim-scroll-w'tr>" +
                "<'d-flex justify-content-between align-items-center my-dt-footer'lpi>";

            if ($('#countries').length !== 0) {

                var table = $('#countries').DataTable({
                    language: {
                        processing: "@_localizer["Loading Data..."]",
                        zeroRecords: "@_localizer["No matching records found"]"
                    },
                    processing: true,
                    serverSide: true,
                    orderCellsTop: true,
                    searching: true,
                    autoWidth: false,
                    deferRender: true,
                    lengthMenu: [10, 50, 100, 1000],
                    order: [],
                    buttons: [
                        { extend: 'reload', className: 'btn my_btn btn-sm reload_table', exportOptions: { columns: ':visible:not(.noexport)'}, text: '<i class="fa fa-refresh"></i>' },
                        {
                            extend: 'excelHtml5', footer: true, filename: 'users', className: 'btn my_btn btn-sm', exportOptions: { columns: [$('thead th:not(.noexport):not(:empty)')] }, text: '@_localizer["excel"]',
                            action: function (e, dt, node, config) {
                                window.location.href = "/Country/CountriesExcel";
                            },
                            init: function (api, node, config) {
                                $(node).removeClass('dt-button');
                            }

                        },
                        {
                            extend: 'print',
                            footer: true,
                            className: 'btn my_btn btn-sm',
                            text: '@_localizer["print"]',
                            action: function (e, dt, node, config) {
                                $.ajax({
                                    type: "POST",
                                    url: "/Country/CountriesPrintTable",
                                    headers: {
                                        "XSRF-TOKEN": document.querySelector('[name="__RequestVerificationToken"]').value
                                    },
                                    success: function (data) {
                                        newPrintBody(data);
                                    },
                                    error: function (xhr) {
                                        alert("Print failed: " + xhr.responseText);
                                    }
                                });
                            },
                            init: function (api, node, config) {
                                $(node).removeClass('dt-button');
                            }
                        }

                    ],
                    dom: template,
                    ajax: {
                        type: "POST",
                        url: '/Country/Index',
                        contentType: "application/json; charset=utf-8",
                        async: true,
                        headers: {
                            "XSRF-TOKEN": document.querySelector('[name="__RequestVerificationToken"]').value
                        },
                        data: function (data) {
                            let additionalValues = [];
                            data.AdditionalValues = additionalValues;
                            return JSON.stringify(data);
                        }
                    },
                    columns: [
                        {
                            data: "Id",
                            title: "@_localizer["Action"]",
                            orderable:false,
                            render: function (data, type, row) {
                                return `
                                                                <div class="dropdown data-table-dropdown">
                                                                    <button class="btn btn-secondary my_btn btn-sm" data-toggle="dropdown">
                                                                        <i class="fa fa-cog" aria-hidden="true"></i> Action
                                                                    </button>
                                                                    <div class="dropdown-menu dropdown-menu-right">
                                                                        <a class="dropdown-item text-dark" href="/@Html.Controller()/Update?countryId=` + data + `">@_localizer["Edit"]</a>
                                                                        <a class="dropdown-item" onclick='Delete("/@Html.Controller()/Delete?countryId=` + data + `")'>@_localizer["Delete"]</a>

                                                                       </div>
                                                                 </div>`
                            },
                            name: "co"
                        },
                        {
                            data: "ArName",
                            name: "co",
                            searchable: true,
                            title: "Arabic Name",

                        },
                        {
                            data: "EnName",
                            name: "co",
                            searchable: true,
                            title: "English Name",

                        },
                        {
                            data: "DisplayOrder",
                            searchable: false,
                            name: "eq",
                            title: "Display Order",
                        },
                        {
                            data: "Hidden",
                            searchable: false,
                            name: "eq",
                            title: "Hidden",
                            orderable:false,
                            render: function (data, type, row) {
                                if (data)
                                    return ` <input checked="checked" class="check-box" disabled="disabled" type="checkbox">`

                                else
                                    return ` <input  class="check-box" disabled="disabled" type="checkbox">`
                            }
                        },
                        {
                            data: "CreatedOnUtc",
                            title: "Created At",
                            render: function (data, type, row) {
                                if (!data) return "";
                                let d = new Date(data); // parse as UTC
                                return d.toLocaleString("en-EG", {
                                    timeZone: "Africa/Cairo",
                                    year: "numeric",
                                    month: "2-digit",
                                    day: "2-digit",
                                    hour: "2-digit",
                                    minute: "2-digit",
                                    second: "2-digit"
                                });
                            }
                        },
                        {
                             data: "UpdatedOnUtc",
                            title: "@_localizer["UpdatedAt"]",
                            render: function (data, type, row) {
                                if (!data) return "";
                                let d = new Date(data);
                                return d.toLocaleString("en-EG", { timeZone: "Africa/Cairo" });
                            }
                        },

                    ]
                });

                table.columns().every(function (index) {
                    $('#log thead tr:last th:eq(' + index + ') input')
                        .on('keyup',
                            function (e) {
                                if (e.keyCode === 13) {
                                    table.column($(this).parent().index() + ':visible').search(this.value).draw();
                                }
                            });
                    $('#log thead tr:last th:eq(' + index + ') input')
                        .on('blur',
                            function () {
                                table.column($(this).parent().index() + ':visible').search(this.value).draw();
                            });
                    if ($(".btn.my_btn.btn-clean").length > 0) {
                        $("div.btn-clean").html($(".btn.my_btn.btn-clean"));
                    }
                });


            }
        });
            function Delete(url) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#325d88",
                cancelButtonColor: "#d33",
                confirmButtonText: "@_localizer["YesDeleteIt"]"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: url,
                        type: "DELETE",
                        success: function (data) {
                            Swal.fire({
                                title: "Deleted!",
                                text: data.message || "The item was deleted successfully.",
                                icon: "success"
                            });
                            $('#professors').DataTable().ajax.reload();
                        },
                        error: function (xhr) {
                            let errorMsg = "Something went wrong."
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMsg = xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                try {
                                    const parsed = JSON.parse(xhr.responseText);
                                    if (parsed.message) errorMsg = parsed.message;
                                } catch {
                                    errorMsg = xhr.responseText;
                                }
                            }
                            Swal.fire({
                                icon: "error",
                                title: "Oops...",
                                text: errorMsg
                            });
                        }
                    });
                }
            });
        }


    </script>
}
